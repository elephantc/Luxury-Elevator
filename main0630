#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <pthread.h>
#include <termio.h>
#include <time.h>

#define EV_MAX 6
#define FLOOR_MAX 20
#define SECONDLINE 40
#define WAIT 2
#define QUE_MAX 10

pthread_t thread;
pthread_t thread2;

void *thread_timeflow();//시간흐름에 따른 EV상태변화
void *thread_show(); //모든 출력제어

void print_menu();//메뉴보여주는 함수(이동,프로그램종료,시뮬레이션정지 등)
void print_EV();//EV이미지 보여주는 함수
void print_log();//EV log 보여주는 함수(5개정도?)
void choice_EV(int from,int to);//사용자 입력에  따라 EV선택,기록하는 함수
int movement_define(int EVnum);//EV움직임정의(상승:1, 정지:0, 하강:-1)

void clear(int startline,int endline);
void gotoxy(int x,int y);
int getch(void);

struct elevator {

	int current;
	int stop[FLOOR_MAX];
};

struct elevator EV[EV_MAX];
int sec=0;

char str1[SECONDLINE]="\0";
char str2[SECONDLINE]="\0";


int main(){
	
	int menu=99; //몇번 메뉴를 선택했는지
	int from,to; //EV 요청층과 목적층
	
	int i,j;
	
	int simul_work=0;


	//초기화
	for(i=0;i<EV_MAX;i++){
		EV[i].current=0;
		for(j=0;j<FLOOR_MAX;j++){
			EV[i].stop[j]=0;
		}
	}
	
	pthread_create(&thread,NULL,&thread_timeflow,NULL);
	simul_work=1;
	
//	pthread_create(&thread2,NULL,&thread_show,NULL);

	while(menu!=0) //menu가 0이면 프로그램 종료
	{
		menu=getch()-'0';
		
		switch(menu){
			case 1:	//시뮬레이션시작
				strncpy(str1,"1.시뮬레이션시작               ",SECONDLINE-1);
				if(simul_work==0){
					pthread_create(&thread,NULL,&thread_timeflow,NULL);
					simul_work=1;}
				break;
			case 2: //시뮬레이션 정지
				strncpy(str1,"2.시뮬레이션정지               ",SECONDLINE-1);
				if(simul_work==1) pthread_cancel(thread);
				simul_work=0;
				break;
			case 3: //EV이동요청
				strncpy(str1,"3.현재층과 이동층 입력:            ",SECONDLINE-1);
				while(1){
					from=getch()-'a';
					strncpy(str2,"                              ",SECONDLINE-1);
					str2[0]=from+'a';
					str2[1]='>';
					to=getch()-'a';
					str2[2]=to+'a';
					if(from<20&&from>=0&&to<20&&to>=0&&from!=to) break;
					else strncpy(str2,"!선택error 재입력!           ",SECONDLINE-1);
				}
				choice_EV(from,to);
				break;
			
			default://error message
				strncpy(str1,"!error!다시입력                  ",SECONDLINE-1);
				break;
		}
	}

	clear(0,100);
	printf("엘리베이터 프로그램이 종료 되었습니다.\n");
	pthread_cancel(thread);
	//pthread_cancel(thread2);
	return 0;
}

void *thread_timeflow(){

	int flag=0;//flag==0인경우 EV 움직임이 없다
        

        clear(0,100);
        print_EV();
        print_menu();

	while(1){

		 for(int i=0;i<EV_MAX;i++){
                        for(int j=0;j<FLOOR_MAX;j++){
                                flag+=EV[i].stop[j];
                        }
                }
		sleep(1);
		sec++;
		gotoxy(0,0);printf("%d",sec);//시뮬레이션동작시간보이기
                print_log();
                if(flag!=0){
                        print_EV();
                        flag=0;
                }
		for(int j=0;j<EV_MAX;j++){
			int d;
			if(EV[j].stop[EV[j].current]>0){	//현재층이 멈춰야할층
				EV[j].stop[EV[j].current]=0;
				flag=1;
			}
			d = movement_define(j);		
			
			//올라가는 중인지 내려가는 중인지 계산하
			/*int stopby=EV[j].current;
			for(int k=0;k<FLOOR_MAX;k++){
				if(EV[j].stop[k]>0) stopby=k;
			}
			*/

			if(d>0) EV[j].current++; 
			else if(d<0) EV[j].current--; //하강
			else ; //같다면 정지
		}

	}
	
};
/*void *thread_show(){
	
	int flag=0;//flag==0인경우 EV 움직임이 없다
        int i,j;
	
	clear(0,100);
	print_EV();
	print_menu();	

	while(1){
		for(i=0;i<EV_MAX;i++){
			for(j=0;j<FLOOR_MAX;j++){
				flag+=EV[i].stop[j];
			}
  		}

		sleep(1);
		gotoxy(0,0);printf("%d",sec);//시뮬레이션동작시간보이기
		print_log();
		if(flag!=0){
			print_EV();
			flag=0;
		}



	}
};*/

void choice_EV(int from,int to){

	int choice=1;
	
	//...
	gotoxy(0,50);
	printf("%d %d ",from,to);	
	EV[choice].stop[from]=2;
	EV[choice].stop[to]=1;

	
}
void print_menu(){
	int x=0,y=1;
	gotoxy(x,y++); 
	printf("=================================\n");
	gotoxy(x,y++); 
	printf("1. 시뮬레이션 시작\n");
	gotoxy(x,y++); 
	printf("2. 시뮬레이션 정지\n");
	gotoxy(x,y++); 
	printf("3. EV 이동요청\n");
	//gotoxy(x,y++); 
	//printf("4. 엘레베이터 고치기\n");
	gotoxy(x,y++); 
	printf("0. 종료\n");
	gotoxy(x,y++); 
	printf("==================================\n");
	gotoxy(x,y++); 

}
void print_EV(){

	int x=SECONDLINE,y=1;
	gotoxy(x,y++);
	printf("__________________________________________\n");	
	gotoxy(x,y++);
	printf("|-----||-----||-----||-----||-----||-----|\n");


	for(int i=FLOOR_MAX-1;i>=0;i--){ 
		gotoxy(x,y++);
		for(int j=0;j<EV_MAX;j++){
			
			

			printf("│ ");
			//방문할 층 확인하기
			if(EV[j].stop[i]>0){	
				printf("*");
			}
			else printf(" ");
	
			if(i==EV[j].current){
				int d = movement_define(j);		
/*
				//올라가는 중인지 내려가는 중인지 계산하기
				int stopby=i;
				for(int k=0;k<FLOOR_MAX;k++){
					if(EV[j].stop[k]>0) stopby=k;
				}
*/				
				if(d>0) printf("▲  │"); //가야할 곳이 현재층(i)보다 크다=상승
				else if(d<0) printf("▼  │"); //작다=하강
				else {
					printf("■  │"); //같다면 정지중
				}

			}else{

				printf("   │");

			}

		}
		gotoxy(x,y++);
		printf("|-----||-----||-----||-----||-----||-----| %2dfloor(%c)\n",i+1,i+'a');

	}

}

int movement_define(int EVnum){

	int depart=EV[EVnum].current;
	int count=0,low=0,high=0;

	for(int i=0;i<FLOOR_MAX;i++){ 
		if(EV[EVnum].stop[i]>0) {
			count++;
			if(EV[EVnum].stop[i]==2) depart=i;
			
			if(i<EV[EVnum].current) low++;
			else if(i>EV[EVnum].current) high++;

		}
	}

	if(count==0) return 0;
	else{
		if(EV[EVnum].current!=depart){//출발층이 존재
			if(EV[EVnum].current<depart) return 1;//상승
			else return -1;//하강
	
		}else{
			if(low>high) return -1;		//하강
			else if(low<high) return 1;	//상승
			else return 0;
		}
	}

	

}



void print_log(){
	int x=0,y= 7;

	gotoxy(x,y++); 
	printf("메뉴입력 : ");
	gotoxy(x,y++); 
	printf("%s",str1);
	gotoxy(x,y++); 
	printf("%s",str2);



}

void clear(int startline,int endline)
{
	int i;
	gotoxy(0,0);
	for(i=startline;i<=endline;i++)
	printf("                                                                                \n");
	gotoxy(0,1);
}
void gotoxy(int x, int y){

	printf("\033[%d;%df",y,x);
	fflush(stdout);

}
int getch(void){
	int ch;
	struct termios buf, save;
	tcgetattr(0,&save);
	buf=save;
	buf.c_lflag&=~(ICANON|ECHO);
	buf.c_cc[VMIN]=1;
	buf.c_cc[VTIME]=0;
	tcsetattr(0,TCSAFLUSH,&buf);
	ch=getchar();
	tcsetattr(0,TCSAFLUSH,&save);
	return ch;
}
